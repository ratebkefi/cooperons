<?php

namespace Apr\ProgramBundle\Repository;

use Apr\ProgramBundle\Entity\Program;
use Doctrine\ORM\EntityRepository;

/**
 * ParticipatesToRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipatesToRepository extends EntityRepository
{

    /**
     * Search invitations by program and label
     *
     * @author Fondative <dev devteam@fondative.com>
     * @param $program Program
     * @param $search
     * @return array
     */
    public function findParticipatesTo($program, $search)
    {
        $query = $this->createQueryBuilder('p');
        $query->leftJoin('p.member', 'm');
        $query->leftJoin('m.user', 's');
        $query->leftJoin('s.contact', 'c');

        $query
            ->andWhere($query->expr()->eq('p.program', ':program'));
        if (is_string($search) && !empty($search)) {
            $query->andWhere(
                $query->expr()->orX(
                    $query->expr()->like('lower(s.email)', '?1'),
                    $query->expr()->like('lower(s.username)', '?1'),
                    $query->expr()->like('lower(s.firstName)', '?1'),
                    $query->expr()->like('lower(s.lastName)', '?1'),
                    $query->expr()->like('lower(m.email)', '?1'),
                    $query->expr()->like('lower(m.firstName)', '?1'),
                    $query->expr()->like('lower(m.lastName)', '?1'),
                    $query->expr()->like('c.phone', '?1')))
                ->setParameter('1', '%' . strtolower($search) . '%');
        }
        $query->setParameter('program', $program);

        return $query->getQuery()->getResult();
    }

    /**
     * Create query find users for ajax grid, return users
     * @param array $params search parameters for grid
     * @return Array.
     */
    public function searchParticipatesTo($program, $search, $sponsorWhoseUplineExcluded = null, $sponsorExcludedFromDownline = null)
    {
        if (is_string($search) && !empty($search)) {
            //Begin build query
            $query = $this->createQueryBuilder('p');
            $query->leftJoin('p.member', 'm');
            $query->leftJoin('m.user', 's');
            $query->leftJoin('s.contact', 'c');

            $query
                ->andWhere($query->expr()->eq('p.program', ':program'))
                ->andWhere(
                    $query->expr()->orX(
                        $query->expr()->like('lower(s.email)', '?1'),
                        $query->expr()->like('lower(s.username)', '?1'),
                        $query->expr()->like('lower(s.firstName)', '?1'),
                        $query->expr()->like('lower(s.lastName)', '?1'),
                        $query->expr()->like('lower(m.email)', '?1'),
                        $query->expr()->like('lower(m.firstName)', '?1'),
                        $query->expr()->like('lower(m.lastName)', '?1'),
                        $query->expr()->like('c.phone', '?1')))
                ->setParameter('1', '%' . strtolower($search) . '%')
                ->setParameter('program', $program);


            if (!is_null($sponsorExcludedFromDownline)) {
                // Non utilisé mais conservé quand même ...
                // Evidemment ne peut être utilisé pour du Post-Parrainage: par définition, on ne peut post-parrainer
                // des membres ayant une upline, i.e. donc un parrain ...
                $idSponsorExcludedFromDownline = $sponsorExcludedFromDownline->getId();
                $memberProgramIdExcludedFromDownline = $sponsorExcludedFromDownline->getMemberProgramId();

                $query
                    ->leftJoin('p.sponsorship', 'sp')
                    ->andWhere(
                        $query->expr()->orX(
                            $query->expr()->not(
                                $query->expr()->like('sp.upline', ':sharpExcludedDownlineSponsorId')),
                            $query->expr()->isNull('p.sponsorship')
                        ))
                    ->andWhere($query->expr()->neq('p.id', ':excludedDownlineSponsorId'))
                    ->setParameter('excludedDownlineSponsorId', $idSponsorExcludedFromDownline)
                    ->setParameter('sharpExcludedDownlineSponsorId', '#' . $memberProgramIdExcludedFromDownline . '#');
            }

            if (!is_null($sponsorWhoseUplineExcluded)) {
                $idSponsorExcludedFromUpline = $sponsorWhoseUplineExcluded->getId();

                $query
                    ->andWhere($query->expr()->isNull('p.sponsorship'))
                    ->andWhere($query->expr()->neq('p.id', ':excludedUplineSponsorId'))
                    ->setParameter('excludedUplineSponsorId', $idSponsorExcludedFromUpline);

                $excludedUpline = $sponsorWhoseUplineExcluded->getUpline();
                if (count($excludedUpline)) {
                    $query->andWhere(
                        $query->expr()->not(
                            $query->expr()->in('p.memberProgramId', $excludedUpline)
                        ));

                }
            }

            // Get result
            return $query->getQuery()->getResult();
        }
    }


    public function getParticipatesToByEmail($program, $email)
    {
        // Plus tard: modifier pour capter aussi les membres non encore users ...
        $query = $this->createQueryBuilder('p');
        $query
            ->leftJoin('p.member', 'm')
            ->leftJoin('m.user', 'u')
            ->andWhere($query->expr()->eq('p.program', ':program'))
            ->andWhere(
                $query->expr()->orX(
                    $query->expr()->eq('u.email', ':email'),
                    $query->expr()->andX(
                        $query->expr()->isNull('m.user'),
                        $query->expr()->eq('m.email', ':email')
                    )
                )
            )
            ->setParameter('email', $email)
            ->setParameter('program', $program);

        $result = $query->getQuery()->getResult();
        if ($result) return $result[0];
    }

    public function getParticipatesToByArrayMemberProgramId($program, $data = array())
    {
        $query = $this->createQueryBuilder('p');
        $query
            ->andWhere($query->expr()->eq('p.program', ':program'))
            ->setParameter('program', $program);
        if ($data && is_array($data) && count($data) > 0) $query->andWhere($query->expr()->in('p.memberProgramId', $data));

        return $query->getQuery()->getResult();
    }

}

?>
